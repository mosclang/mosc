// Generated automatically from src/builtin/core/core.msc. Do not edit.
static const char* coreModuleSource =
"kulu Diat\n"
"kulu Djuru\n"
"kulu Tienya\n"
"kulu Tii\n"
"kulu Funan;\n"
"kulu Gansan\n"
"kulu A {\n"
"    dialen yira() {\n"
"         A.seben_(\"\\n\")\n"
"    }\n"
"    dialen yira(arg) {\n"
"        A.fenSeben_(arg)\n"
"        A.seben_(\"\\n\")\n"
"        segin niin arg\n"
"    }\n"
"    dialen fenSeben_(obj) {\n"
"        nin str = obj.sebenma\n"
"        nii str ye Seben {\n"
"            A.seben_(str)\n"
"        } note {\n"
"            A.seben_(\"[Fen kunta sorola]\")\n"
"        }\n"
"    }\n"
"    dialen beeYira(sequence) {\n"
"       seginka sequence kono object A.fenSeben_(object)\n"
"        A.seben_(\"\\n\")\n"
"    }\n"
"\n"
"     dialen seben(arg) {\n"
"        A.fenSeben_(arg)\n"
"        segin niin arg\n"
"     }\n"
"\n"
"      dialen beeSeben(sequence) {\n"
"        seginka sequence kono object A.fenSeben_(object)\n"
"      }\n"
"};\n"
"\n"
"#*\n"
"* The Tugun kulu, a continous elements of object\n"
"* It's the base kulu of all iterable kulu such as Wala, Walan, Seben\n"
"*#\n"
"\n"
"kulu Tugun {\n"
"  bee(f) {\n"
"    nin result = tien\n"
"    seginka (ale kono element) {\n"
"      result = f.weele(element)\n"
"      nii !result segin niin result\n"
"    }\n"
"    segin niin result\n"
"  }\n"
"\n"
"  sukuSuku(f) { #any\n"
"    nin result = galon\n"
"    seginka (ale kono element) {\n"
"      result = f.weele(element)\n"
"      nii result segin niin result\n"
"    }\n"
"    segin niin result\n"
"  }\n"
"\n"
"  bAkono(element) {\n"
"    seginka ale kono item {\n"
"      nii element == item segin niin tien\n"
"    }\n"
"    segin niin galon\n"
"  }\n"
"\n"
"  hakan {#count\n"
"    nin result = 0\n"
"    seginka ale kono element {\n"
"      result = result + 1\n"
"    }\n"
"    segin niin result\n"
"  }\n"
"\n"
"  hakan(f) {\n"
"    nin result = 0\n"
"    seginka ale kono element {\n"
"      nii (f.weele(element)) result = result + 1\n"
"    }\n"
"    segin niin result\n"
"  }\n"
"\n"
"  kelenkelen(f) {\n"
"    seginka ale kono element {\n"
"      f.weele(element)\n"
"    }\n"
"  }\n"
"\n"
"  laKolon {\n"
"       segin niin nii (ale.iterate(gansan, 1)) {\n"
"         galon;\n"
"       } note {\n"
"         tien\n"
"       }\n"
"  }\n"
"\n"
"  yelema(transformation) { WalaTugun.kura(ale, transformation) }\n"
"\n"
"  pan(count) {\n"
"    nii (!(count ye Diat) || !count.yeInt || count < 0) {\n"
"      Djuru.tike(\"Count must be a non-negative integer.\")\n"
"    }\n"
"\n"
"    segin niin PanTugun.kura(ale, count)\n"
"  }\n"
"\n"
"  taa(count) {\n"
"    nii (!(count ye Diat) || !count.yeInt || count < 0) {\n"
"      Djuru.tike(\"Count must be a non-negative integer.\")\n"
"    }\n"
"\n"
"    segin niin TaaTugun.kura(ale, count)\n"
"  }\n"
"\n"
"  yoroMin(predicate) { YorominTugun.kura(ale, predicate) }\n"
"\n"
"  dogoya(acc, f) {\n"
"    seginka ale kono element {\n"
"      acc = f.weele(acc, element)\n"
"    }\n"
"    segin niin acc\n"
"  }\n"
"\n"
"  dogoya(f) {\n"
"    nin iter = ale.iterate(gansan, 1)\n"
"    nii (!iter) Djuru.tike(\"Can't reduce an empty sequence.\")\n"
"\n"
"    # Seed with the first element.\n"
"    nin result = ale.iteratorValue(iter)\n"
"    foo (iter = ale.iterate(iter, 1)) {\n"
"      result = f.weele(result, ale.iteratorValue(iter))\n"
"    }\n"
"\n"
"    segin niin result\n"
"  }\n"
"\n"
"  kunBen() {ale.kunBen(\"\")}\n"
"\n"
"  kunBen(sep) {\n"
"\n"
"    nin first = tien\n"
"    nin result = \"\"\n"
"    seginka ale kono element {\n"
"      nii (!first) result = result + sep\n"
"      first = galon\n"
"      result = result + element.sebenma\n"
"    }\n"
"\n"
"    segin niin result\n"
"  }\n"
"\n"
"  walanNa { # toList\n"
"    nin result = Walan.kura()\n"
"    seginka ale kono element {\n"
"      result.aFaraAkan(element)\n"
"    }\n"
"    segin niin result\n"
"  }\n"
"  iterate(iterator) {\n"
"        ale.iterate(iterator, 1);\n"
"  }\n"
"}\n"
"kulu WalaTugun ye Tugun {\n"
"    nin _sequence;\n"
"    nin _fn;\n"
"  dilan kura(sequence, fn) {\n"
"    ale._sequence = sequence\n"
"    ale._fn = fn\n"
"  }\n"
"\n"
"  iterate(iterator, step) { ale._sequence.iterate(iterator, step) }\n"
"  iteratorValue(iterator) { ale._fn.weele(ale._sequence.iteratorValue(iterator)) }\n"
"}\n"
"\n"
"kulu PanTugun ye Tugun {\n"
"    nin _sequence;\n"
"    nin _count;\n"
"  dilan kura(sequence, count) {\n"
"    ale._sequence = sequence\n"
"    ale._count = count\n"
"  }\n"
"\n"
"  iterate(iterator, step) {\n"
"    nii (iterator) {\n"
"      segin niin ale._sequence.iterate(iterator, step)\n"
"    } note {\n"
"      iterator = ale._sequence.iterate(iterator, step)\n"
"      nin count = ale._count\n"
"      foo (count > 0 && iterator) {\n"
"        iterator = ale._sequence.iterate(iterator, step)\n"
"        count = count - 1\n"
"      }\n"
"      segin niin iterator\n"
"    }\n"
"  }\n"
"\n"
"  iteratorValue(iterator) { ale._sequence.iteratorValue(iterator) }\n"
"}\n"
"\n"
"kulu TaaTugun ye Tugun {\n"
"    nin _sequence;\n"
"    nin _count;\n"
"    nin _taken;\n"
"\n"
"  dilan kura(sequence, count) {\n"
"    ale._sequence = sequence\n"
"    ale._count = count\n"
"  }\n"
"\n"
"  iterate(iterator, step) {\n"
"    nii (!iterator) ale._taken = 1 note ale._taken = ale._taken + 1\n"
"    nii (ale._taken > ale._count) segin niin gansan note segin niin ale._sequence.iterate(iterator, step)\n"
"  }\n"
"\n"
"  iteratorValue(iterator) { ale._sequence.iteratorValue(iterator) }\n"
"}\n"
"\n"
"kulu YorominTugun ye Tugun {\n"
"    nin _sequence;\n"
"    nin _fn;\n"
"  dilan kura(sequence, fn) {\n"
"    ale._sequence = sequence\n"
"    ale._fn = fn\n"
"  }\n"
"\n"
"\n"
"  iterate(iterator, step) {\n"
"    foo (iterator = ale._sequence.iterate(iterator, step)) {\n"
"      nii (ale._fn.weele(ale._sequence.iteratorValue(iterator))) atike\n"
"    }\n"
"    segin niin iterator\n"
"  }\n"
"\n"
"  iteratorValue(iterator) { ale._sequence.iteratorValue(iterator) }\n"
"}\n"
"\n"
"\n"
"kulu Seben ye Tugun {\n"
"  bytes { SebenByteTugun.kura(ale) }\n"
"  codePoints { SebenCodePointTugun.kura(ale) }\n"
"\n"
"  faraFara(delimiter) {\n"
"    nii (!(delimiter ye Seben) || delimiter.laKolon) {\n"
"      Djuru.tike(\"Delimiter must be a non-empty string.\")\n"
"    }\n"
"\n"
"    nin result = []\n"
"\n"
"    nin last = 0\n"
"    nin index = 0\n"
"\n"
"    nin delimSize = delimiter.byteHakan_\n"
"    nin size = ale.byteHakan_\n"
"\n"
"    foo (last < size && (index = ale.uDayoro(delimiter, last)) != -1) {\n"
"      result.aFaraAkan(ale[last...index])\n"
"      last = index + delimSize\n"
"    }\n"
"\n"
"    nii (last < size) {\n"
"      result.aFaraAkan(ale[last..-1])\n"
"    } note {\n"
"      result.aFaraAkan(\"\")\n"
"    }\n"
"    segin niin result\n"
"  }\n"
"\n"
"  falen(from, to) {\n"
"    nii (!(from ye Seben) || from.isEmpty) {\n"
"      Djuru.tike(\"From must be a non-empty string.\")\n"
"    } note nii (!(to ye Seben)) {\n"
"      Djuru.tike(\"To must be a string.\")\n"
"    }\n"
"\n"
"    nin result = \"\"\n"
"\n"
"    nin last = 0\n"
"    nin index = 0\n"
"\n"
"    nin fromSize = from.byteHakan_\n"
"    nin size = ale.byteHakan_\n"
"\n"
"    foo (last < size && (index = ale.uDayoro(from, last)) != -1) {\n"
"      result = result + ale[last...index] + to\n"
"      last = index + fromSize\n"
"    }\n"
"\n"
"    nii (last < size) result = result + ale[last..-1]\n"
"\n"
"    segin niin result\n"
"  }\n"
"\n"
"  sanuya() { ale.sanuya_(\"\\t\\r\\n \", tien, tien) }\n"
"  sanuya(chars) { ale.sanuya_(chars, tien, tien) }\n"
"  labanSanuya() { ale.sanuya_(\"\\t\\r\\n \", galon, tien) }\n"
"  labanSanuya(chars) { ale.sanuya_(chars, galon, tien) }\n"
"  damineSanuya() { ale.sanuya_(\"\\t\\r\\n \", tien, galon) }\n"
"  damineSanuya(chars) { ale.sanuya_(chars, tien, galon) }\n"
"\n"
"  sanuya_(chars, trimStart, trimEnd) {\n"
"    nii (!(chars ye Seben)) {\n"
"      Djuru.tike(\"Characters must be a string.\")\n"
"    }\n"
"\n"
"    nin codePoints = chars.codePoints.walanNa\n"
"\n"
"    nin start\n"
"    nii (trimStart) {\n"
"      foo (start = ale.iterate(start, 1)) {\n"
"        nii (!codePoints.bAkono(ale.codePointYoro_(start))) atike\n"
"      }\n"
"\n"
"      nii (start == galon) segin niin \"\"\n"
"    } note {\n"
"      start = 0\n"
"    }\n"
"\n"
"    nin end\n"
"    nii (trimEnd) {\n"
"      end = ale.byteHakan_ - 1\n"
"      foo (end >= start) {\n"
"        nin codePoint = ale.codePointYoro_(end)\n"
"        nii (codePoint != -1 && !codePoints.bAkono(codePoint)) atike\n"
"        end = end - 1\n"
"      }\n"
"\n"
"      nii (end < start) segin niin \"\"\n"
"    } note {\n"
"      end = -1\n"
"    }\n"
"\n"
"    segin niin ale[start..end]\n"
"  }\n"
"\n"
"  *(count) {\n"
"    nii (!(count ye Diat) || !count.yeInt || count < 0) {\n"
"      Djuru.tike(\"Count must be a non-negative integer.\")\n"
"    }\n"
"\n"
"    nin result = \"\"\n"
"    seginka 0...count kono i {\n"
"      result = result + ale\n"
"    }\n"
"    segin niin result\n"
"  }\n"
"\n"
"  <  (other) { ale.sunma(other) <  0 }\n"
"  <= (other) { ale.sunma(other) <= 0 }\n"
"  >  (other) { ale.sunma(other) >  0 }\n"
"  >= (other) { ale.sunma(other) >= 0 }\n"
"}\n"
"\n"
"kulu SebenByteTugun ye Tugun {\n"
"  nin _string;\n"
"  dilan kura(string) {\n"
"    ale._string = string\n"
"  }\n"
"\n"
"  [index] { ale._string.byteYoro_(index) }\n"
"  iterate(iterator, step) { ale._string.iterateByte_(iterator, step) }\n"
"  iteratorValue(iterator) { ale._string.byteYoro_(iterator) }\n"
"\n"
"  hakan { ale._string.byteHakan_ }\n"
"}\n"
"\n"
"kulu SebenCodePointTugun ye Tugun {\n"
"  nin _string\n"
"  dilan kura(string) {\n"
"    ale._string = string\n"
"  }\n"
"\n"
"  [index] { ale._string.codePointYoro_(index) }\n"
"  iterate(iterator, step) { ale._string.iterate(iterator, step) }\n"
"  iteratorValue(iterator) { ale._string.codePointYoro_(iterator) }\n"
"\n"
"  hakan { ale._string.hakan }\n"
"}\n"
"\n"
"kulu Walan ye Tugun {\n"
"  aBeeFaraAkan(other) {\n"
"    seginka other kono element {\n"
"      ale.aFaraAkan(element)\n"
"    }\n"
"    segin niin other\n"
"  }\n"
"\n"
"  woloma() { ale.woloma {(low, high)=> low < high } }\n"
"\n"
"  woloma(comparer) {\n"
"    nii (!(comparer ye Tii)) {\n"
"      Djuru.tike(\"Comparer must be a function.\")\n"
"    }\n"
"    ale.wolomaTelimani_(0, ale.hakan - 1, comparer)\n"
"    segin niin ale\n"
"  }\n"
"\n"
"  wolomaTelimani_(low, high, comparer) {\n"
"    nii (low < high) {\n"
"      nin p = ale.kilakila_(low, high, comparer)\n"
"      ale.wolomaTelimani_(low, p, comparer)\n"
"      ale.wolomaTelimani_(p + 1, high, comparer)\n"
"    }\n"
"  }\n"
"\n"
"  kilakila_(low, high, comparer) {\n"
"    nin mid = ((low + high)/2).floor\n"
"    nin p = ale[mid]\n"
"    nin i = low - 1\n"
"    nin j = high + 1\n"
"    foo (tien) {\n"
"        foo (i < high) {\n"
"            i = i + 1\n"
"            nii !comparer.weele(ale[i], p) atike\n"
"        }\n"
"        foo (j>low) {\n"
"            j = j - 1\n"
"            nii (!comparer.weele(p, ale[j])) atike\n"
"        }\n"
"        nii (i >= j) segin niin j\n"
"        ale.falen(i, j)\n"
"    }\n"
"\n"
"  }\n"
"\n"
"  sebenma { \"[${ale.kunBen(\", \")}]\" }\n"
"\n"
"  +(other) {\n"
"    nin result = ale[0..-1]\n"
"    seginka other kono element {\n"
"      result.aFaraAkan(element)\n"
"    }\n"
"    segin niin result\n"
"  }\n"
"\n"
"  *(count) {\n"
"    nii (!(count ye Diat) || !count.yeInt || count < 0) {\n"
"      Djuru.tike(\"Count must be a non-negative integer.\")\n"
"    }\n"
"\n"
"    nin result = []\n"
"    seginka 0...count kono i {\n"
"      result.aBeeFaraAkan(ale)\n"
"    }\n"
"    segin niin result\n"
"  }\n"
"}\n"
"\n"
"kulu Wala ye Tugun {\n"
"  keys { WalaKeyTugun.kura(ale) }\n"
"  values { WalaValueTugun.kura(ale) }\n"
"\n"
"  sebenma {\n"
"    nin first = tien\n"
"    nin result = \"{\"\n"
"\n"
"    seginka ale.keys kono key {\n"
"      nii (!first) result = result + \", \"\n"
"      first = galon\n"
"      result = result + \"${key}: ${ale[key]}\"\n"
"    }\n"
"\n"
"    segin niin result + \"}\"\n"
"  }\n"
"\n"
"  iteratorValue(iterator) {\n"
"    segin niin WalaEntry.kura(\n"
"        ale.keyIteratorValue_(iterator),\n"
"        ale.valueIteratorValue_(iterator))\n"
"  }\n"
"}\n"
"\n"
"kulu WalaEntry {\n"
"  nin _key\n"
"  nin _value\n"
"  dilan kura(key, value) {\n"
"    ale._key = key\n"
"   ale._value = value\n"
"  }\n"
"\n"
"  key { ale._key }\n"
"  value { ale._value }\n"
"\n"
"  sebenma { \"${ale._key}:${ale._value}\" }\n"
"}\n"
"\n"
"kulu WalaKeyTugun ye Tugun {\n"
"  nin _map;\n"
"  dilan kura(map) {\n"
"    ale._map = map\n"
"  }\n"
"\n"
"  iterate(n, step) { ale._map.iterate(n, step) }\n"
"  iteratorValue(iterator) { ale._map.keyIteratorValue_(iterator) }\n"
"}\n"
"\n"
"kulu WalaValueTugun ye Tugun {\n"
"  nin _map;\n"
"  dilan kura(map) {\n"
"    ale._map = map\n"
"  }\n"
"\n"
"  iterate(n, step) { ale._map.iterate(n, step) }\n"
"  iteratorValue(iterator) { ale._map.valueIteratorValue_(iterator) }\n"
"}\n"
"\n"
"kulu KuluLadaw {\n"
"\n"
"  nin _attributes\n"
"  nin _methods\n"
"  yere { ale._attributes }\n"
"  tiidenw { ale._methods }\n"
"  dilan kura(attributes, methods) {\n"
"    ale._attributes = attributes\n"
"    ale._methods = methods\n"
"  }\n"
"  sebenma { \"yere: ${ale._attributes} tiidenw: ${ale._methods}\" }\n"
"}\n"
"\n";
