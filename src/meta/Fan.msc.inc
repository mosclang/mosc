// Generated automatically from deps/mosc/src/meta/Fan.msc. Do not edit.
static const char* FanModuleSource =
"kulu Fan {\n"
"  dialen variables(module) {\n"
"    nii !(module ye Seben) Djuru.tike(\"Module name must be a string.\")\n"
"    nin result = Fan.getModuleVariables_(module)\n"
"    nii result != gansan segin niin result\n"
"\n"
"    Djuru.tike(\"Could not find a module named '${module}'.\")\n"
"  }\n"
"\n"
"  dialen eval(source) { Fan.eval(source, gansan) }\n"
"  dialen eval(source, module) {\n"
"    nii !(source ye Seben) Djuru.tike(\"Source code must be a string.\")\n"
"\n"
"    nin closure = Fan.compile_(source, module, galon, galon)\n"
"    # TODO: Include compile errors.\n"
"    nii closure == gansan Djuru.tike(\"Could not compile source code.\")\n"
"\n"
"    closure.weele()\n"
"  }\n"
"\n"
"  dialen compileExpression(source) { Fan.compileExpression(source, gansan) }\n"
"  dialen compileExpression(source, module) {\n"
"    nii !(source ye Seben) Djuru.tike(\"Source code must be a string.\")\n"
"    segin niin Fan.compile_(source, module, tien, tien)\n"
"  }\n"
"\n"
"  dialen compile(source) { Fan.compile(source, gansan) }\n"
"  dialen compile(source, module) {\n"
"    nii !(source ye Seben) Djuru.tike(\"Source code must be a string.\")\n"
"    segin niin Fan.compile_(source, module, galon, tien)\n"
"  }\n"
"\n"
"  dunan dialen compile_(source, module, isExpression, printErrors)\n"
"  dunan dialen getModuleVariables_(module)\n"
"}\n";
