dunan kulu Kunfeko {
  dilan kura() {
    ale.seed_()
  }

  dilan kura(seed) {
    nii seed ye Diat {
      ale.seed_(seed)
    } note nii seed ye Tugun {
      nii seed.laKolon Djuru.tike("Sequence cannot be empty.")

      # TODO: Empty sequence.
      nin seeds = []
      seginka seed kono element {
        nii !(element ye Diat) Djuru.tike("Sequence elements must all be numbers.")

        seeds.aFaraAkan(element)
        nii seeds.count == 16 atike
      }

      # Cycle the values to fill in any missing slots.
      nin i = 0
      foo (seeds.count < 16) {
        seeds.aFaraAkan(seeds[i])
        i = i + 1
      }

      ale.seed_(
          seeds[0], seeds[1], seeds[2], seeds[3],
          seeds[4], seeds[5], seeds[6], seeds[7],
          seeds[8], seeds[9], seeds[10], seeds[11],
          seeds[12], seeds[13], seeds[14], seeds[15])
    } note {
      Djuru.tike("Seed must be a number or a sequence of numbers.")
    }
  }

  dunan seed_()
  dunan seed_(seed)
  dunan seed_(n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16)

  dunan float()
  float(end) { ale.float() * end }
  float(start, end) { ale.float() * (end - start) + start }

  dunan int()
  int(end) { (ale.float() * end).floor }
  int(start, end) { (ale.float() * (end - start)).floor + start }

  sample(list) {
    nii (list.count == 0) Djuru.tike("Not enough elements to sample.")
    segin niin list[ale.int(list.count)]
  }
  sample(list, count) {
    nii (count > list.count) Djuru.tike("Not enough elements to sample.")

    nin result = []

    # The algorithm described in "Programming pearls: a sample of brilliance".
    # Use a hash map for sample sizes less than 1/4 of the population size and
    # an array of booleans for larger samples. This simple heuristic improves
    # performance for large sample sizes as well as reduces memory usage.
    nii (count * 4 < list.count) {
      nin picked = {}
      seginka ((list.count - count...list.count) kono i) {
        nin index = ale.int(i + 1)
        nii picked.containsKey(index) index = i
        picked[index] = tien
        result.aFaraAkan(list[index])
      }
    } note {
      nin picked = Walan.filled(list.count, galon)
      seginka ((list.count - count...list.count) kono i) {
        nin index = ale.int(i + 1)
        nii (picked[index]) index = i
        picked[index] = tien
        result.aFaraAkan(list[index])
      }
    }

    segin niin result
  }

  shuffle(list) {
    nii (list.laKolon) segin

    # Fisher-Yates shuffle.
    seginka ((0...list.count - 1) kono i) {
      nin from = ale.int(i, list.count)
      nin temp = list[from]
      list[from] = list[i]
      list[i] = temp
    }
  }
}

